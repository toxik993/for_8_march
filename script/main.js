document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
});

document.addEventListener('keydown', function(e) {
    if ((e.ctrlKey || e.metaKey) && (e.key === 'c' || e.key === 'C')) {
        e.preventDefault();
    }
});

const messages = [
"–ù–∞–∂–∏–º–∞–π –≥–¥–µ —É–≥–æ–¥–Ω–æ",  
"–≠–π, —Å–æ–ª–Ω—Ü–µ –º–æ—ë ‚ù§Ô∏è",  
"–Ø —Ö–æ—á—É —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ —Å–∫–∞–∑–∞—Ç—å",  
"–ù–æ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∂–º–∏ —Ä–∞–∑–æ–∫",  
"–ù–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑",  
"–î–∞–≤–∞–π, –Ω–µ —Å–¥–∞–≤–∞–π—Å—è, —è –≤ —Ç–µ–±—è –≤–µ—Ä—é)",  
"–ú–æ–∂–µ—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑?",  
"–°–µ—Ä—å–µ–∑–Ω–æ",  
"–≠—Ç–æ",  
"–ü–æ—Å–ª–µ–¥–Ω–∏–π",  
"–ê –º–æ–∂–µ—Ç –Ω–µ—Ç",  
"–í–µ—â—å",
"–ö–æ—Ç–æ—Ä—É—é —è —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å",
"–û—á–µ–Ω—å –≤–∞–∂–Ω–∞",  
"–£–∂–µ –≤–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ?",  
"–ù–æ —ç—Ç–æ –µ—â–µ –Ω–µ –≤—Å—ë",  
"–¢—ã –¥–∞–∂–µ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å —Å–∫–æ–ª—å–∫–æ —è —Ç—É—Ç –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å)",
"–ö—Å—Ç–∞—Ç–∏",
"–ö–∞–∫ —Ç–µ–±–µ –ø–µ—Å–Ω—è –Ω–∞ —Ñ–æ–Ω–µ?",
"–Ø —Ç–æ–∂–µ –¥—É–º–∞—é, —á—Ç–æ –ø–µ—Å–Ω—è –∫—Ä–∞—Å–∏–≤–∞—è",
"–ù–æ –Ω–µ –∫—Ä–∞—Å–∏–≤–µ–µ —Ç–µ–±—è)",
"–ê –µ—â—ë —è –±—ã —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø–∞—Ä—É —Å–ª–æ–≤)",
"–¢—ã –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è",
"–£ —Ç–µ–±—è –º–∏–ª–æ–µ –ª–∏—á–∏–∫–æ",
"–ò –º–Ω–µ –±–µ–∑—É–º–Ω–æ –Ω—Ä–∞–≤—è—Ç—Å—è —Ç–≤–æ–∏ –≥–ª–∞–∑–∫–∏",
"–Ø –ø—Ä–æ—Å—Ç–æ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞",
"–ê —Ç–≤–æ–∏ –Ω–µ–∂–Ω—ã–µ —Ä—É–∫–∏",
"–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∑–∫–∞",
"–ê —Ö–∞—Ä–∞–∫—Ç–µ—Ä...",
"–Ø —Å—Ö–æ–∂—É —Å —É–º–∞",
"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ—è —Å–º–µ–ª–æ—Å—Ç—å",
"–ö–∞–ø—Ä–∏–∑–Ω–æ—Å—Ç—å",
"–ò –≤—Å–µ —ç—Ç–∏ –º–∏–ª—ã–µ –º–æ–º–µ–Ω—Ç—ã",
"–Ø –æ–±–æ–∂–∞—é —Ç–µ–±—è)",
"–¢—ã –ª—É—á—à–∏–π —á–µ–ª–æ–≤–µ–∫ –∫–æ—Ç–æ—Ä–æ–≥–æ —è –ø–æ–≤—Å—Ç—Ä–µ—á–∞–ª",
"–ù–æ —è –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–æ—à—ë–ª –æ—Ç —Ç–µ–º—ã",
"–ü–æ—ç—Ç–æ–º—É",
"–ü–µ—Ä–µ–π–¥—ë–º –∫ –≥–ª–∞–≤–Ω–æ–º—É",
"–Ø –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å",  
"–Ø –û–ß–ï–ù–¨ –°–ò–õ–¨–ù–û –õ–Æ–ë–õ–Æ –¢–ï–ë–Ø ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è",  
"–Ø –Ω–∞–¥–µ—é—Å—å —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–∞–≤–∏–ª–æ—Å—å",
"–ù–æ —ç—Ç–æ –µ—â—ë –Ω–µ –≤—Å—ë",
"–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É üíù"
];

let currentPage = 0;
let isLastPage = false;

function showMessage() {
    $('.message').text(messages[currentPage]);
    
    isLastPage = currentPage === messages.length - 1;
    
    if (isLastPage) {
        $('.next-button').show();
        $('.bg_heart').css('cursor', 'default');
    } else {
        $('.next-button').hide();
        $('.bg_heart').css('cursor', 'pointer');
    }
}

$('.bg_heart').on('click', function() {
    if (!isLastPage) {
        currentPage++;
        showMessage();
    }
});

var love = setInterval(function() {
    var r_num = Math.floor(Math.random() * 40) + 1;
    var r_size = Math.floor(Math.random() * 65) + 10;
    var r_left = Math.floor(Math.random() * 100) + 1;
    var r_bg = Math.floor(Math.random() * 25) + 100;
    var r_time = Math.floor(Math.random() * 5) + 5;
    
    $('.bg_heart').append("<div class='heart' style='width:" + r_size + "px;height:" + r_size + "px;left:" + r_left + "%;background:rgba(255," + (r_bg - 25) + "," + r_bg + ",1);animation:love " + r_time + "s ease'></div>");
    
    $('.bg_heart').append("<div class='heart' style='width:" + (r_size - 10) + "px;height:" + (r_size - 10) + "px;left:" + (r_left + r_num) + "%;background:rgba(255," + (r_bg - 25) + "," + (r_bg + 25) + ",1);animation:love " + (r_time + 5) + "s ease'></div>");
    
    $('.heart').each(function() {
        var top = parseFloat($(this).css("top"));
        var width = parseFloat($(this).css("width"));
        if (top <= -100 || width >= 150) {
            $(this).remove();
        }
    });
}, 500);

showMessage();

function clearMusicState() {
    localStorage.removeItem('musicPlaying');
    localStorage.removeItem('musicCurrentTime');
}

window.onload = function() {
    clearMusicState(); 
}

function setupMusic() {
    const music = document.getElementById('backgroundMusic');
    
    if (!localStorage.getItem('initialLoad')) {
        clearMusicState();
        localStorage.setItem('initialLoad', 'true');
        music.currentTime = 0;
    }

    const isMusicPlaying = localStorage.getItem('musicPlaying') === 'true';
    const musicCurrentTime = localStorage.getItem('musicCurrentTime') || 0;

    if (isMusicPlaying) {
        music.currentTime = parseFloat(musicCurrentTime);
        music.play().catch(error => console.log('Playback failed', error));
    }

    music.addEventListener('play', () => {
        localStorage.setItem('musicPlaying', 'true');
    });

    music.addEventListener('pause', () => {
        localStorage.setItem('musicPlaying', 'false');
    });

    setInterval(() => {
        localStorage.setItem('musicCurrentTime', music.currentTime);
    }, 1000);

    document.addEventListener('click', function startMusic() {
        music.play().catch(error => {
            console.log('Autoplay prevented', error);
        });
        document.removeEventListener('click', startMusic);
    });
}

document.addEventListener('DOMContentLoaded', setupMusic);